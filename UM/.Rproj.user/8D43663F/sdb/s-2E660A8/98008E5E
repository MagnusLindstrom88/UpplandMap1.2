{
    "contents" : "require(shiny)\nrequire(leaflet)\nrequire(magrittr)\nrequire(sp)\nrequire(htmltools)\nlibrary(dplyr)\nrequire(shinyjs)\nlibrary(shinyjs)\nlibrary(V8)\nlibrary(RColorBrewer)\nsource(\"helper.R\")\n\nfragor2<-read.csv(\"f2.csv\")\nfragor<-readRDS(\"fragor.Rda\")\ndata3<-read.csv(\"data3.csv\")\ndata6<-readRDS(\"data6.rda\")\n\nshinyServer(function(input, output, session) {\n  \n\n  \n  output$map <- renderLeaflet({\n    leaflet() %>%\n      addTiles()%>%\n      addPolygons(data=uv84, weight = 2, fillOpacity = 0.5, smoothFactor = 0.5,\n                  popup = htmlEscape(uv84$NAMN))%>%\n       addProviderTiles(\"CartoDB.Positron\")\n\n     \n  })\n  \n  \n  observeEvent(input$könButton, {\n    toggle(\"Check1\")\n  })\n  observeEvent(input$utbildningButton, {\n    toggle(\"Check2\")\n  })\n  observeEvent(input$sysselsättningButton, {\n    toggle(\"Check3\")\n  })\n  observeEvent(input$tidIUppväsButton, {\n    toggle(\"Check4\")\n  })\n  observeEvent(input$ålderButton, {\n    toggle(\"Check5\")\n  })\n\n  område_popup<-reactive({\n    \n\n    urval_data<-urval()\n    områden<-karta(input$var,urval_data)\n    z<-popup(input$var)\n    område_popup <-paste( \"<Strong>Område: </strong>\",\n                          områden[,1],\n                          \"<br><Strong>\",z[1,],\":</strong>\",\n                          områden[,2],\n                          \"<br><strong>\",z[2,],\":</strong>\",\n                          områden[,3],\n                          \"<br><strong>\",z[3,],\":</strong>\",\n                          områden[,4],\n                          \"<br><strong>\",z[4,],\":</strong>\",\n                          områden[,5],\n                          \"<br><strong>\",z[5,],\":</strong>\",\n                          områden[,6])\n\n    \n  })\n  \n  numeric_popup<-reactive({\n    \n    urval_data<-urval()\n    områden<-numeric_map(input$var2,urval_data)\n    \n    numeric_popup<-paste(\"<Strong>Område: </strong>\",\n                         områden[,1],\n                         \"<br><Strong>Data:</strong>\",\n                         områden[,2])\n    \n  })\n  \n  observe({\n    \n    pop_up<-område_popup()\n    urval_data<-urval()\n    områden<-karta(input$var,urval_data)\n    factpal <- colorFactor(topo.colors(5), områden$favorit)\n    leafletProxy(\"map\")%>%\n      clearShapes()%>%\n      clearControls()%>%\n      addPolygons(data=uv84, weight = 2, fillOpacity = 0.6, smoothFactor = 0.5,\n                  popup = pop_up, color = ~factpal(områden$favorit))%>%\n      addLegend(\"bottomleft\", pal = factpal, values = områden$favorit, na.label =\"Ingen data\", title =\"Frågor\" )\n  })\n    \n    observe({\n      if(!input$var2 ==\"Välj ett alternativ\"){\n       \n      pop_up<-numeric_popup()\n      urval_data<-urval()\n      områden<-numeric_map(input$var2,urval_data)  \n      legendvar<-numeric_legend(input$var2)\n        \n        faktorTest <-cut(områden[,2],breaks=c(-Inf,5,9,+Inf),\n                         include.lowest=T,labels = c(\"Fråga 1 är viktigare\", \"Båda frågorna är lika viktiga\", \"Fråga 2 är viktigare\"))\n      \n        \n        colorTest <- colorFactor(c(\"blue3\",\"green2\",\"gold\"),\n                                    levels = faktorTest,ordered=FALSE)\n                                 \n        \n        \n        \n      factpal <- colorNumeric(\"RdBu\", områden$data)\n      leafletProxy(\"map\")%>%\n        clearShapes()%>%\n        clearControls()%>%\n        addPolygons(data=uv84, weight = 2, fillOpacity = 0.8, smoothFactor = 0.5,\n                    popup = pop_up, color = ~colorTest(faktorTest))%>%\n        addLegend(\"bottomleft\", pal = colorTest, values = faktorTest, na.label =\"Ingen data\", title =legendvar[1,1] )\n      } else{\n        \n      }\n      \n    })\n    \n\n\n  urval<-function(){\n    \n    y<-data3  \n    \n    if(!is.null(input$Check1)){\n      c1<-input$Check1  \n      y<-subset(y,Kön %in% c1)\n    }\n    \n    if(!is.null(input$Check2)){\n      c2<-input$Check2  \n      y<-subset(y,Utbildningsnivå %in% c2)\n    }\n    if(!is.null(input$Check3)){\n      c3<-input$Check3  \n      y<-subset(y,Sysselsättning %in% c3)\n    }\n    if(!is.null(input$Check4)){\n      c4<-input$Check4  \n      y<-subset(y,Tid.i.UppVäs %in% c4)\n      \n    }\n    if(!is.null(input$Check5)){\n      c5<-input$Check5\n      y<-subset(y,Ålder %in% c5)\n    }\n    \n    y2<-subset(y,select=c(X1a:Area))\n    y3<-y2 %>%group_by(Area) %>%summarise_each(funs(mean))\n    class(y3) <- \"data.frame\"\n    cleanY2<-round_df(y3,1)\n    \n    return(cleanY2)\n    \n    \n  }\n  \n})\n",
    "created" : 1480766019631.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3543303005",
    "id" : "98008E5E",
    "lastKnownWriteTime" : 1465918166,
    "path" : "C:/Users/Magnus/Desktop/UpplandMap lokaltest/UM/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}